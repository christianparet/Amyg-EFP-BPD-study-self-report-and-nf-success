SubjectID == "EFP15" |
SubjectID == "EFP17" |
SubjectID == "EFP18" |
SubjectID == "EFP19" |
SubjectID == "EFP23" |
SubjectID == "EFP33" |
SubjectID == "EFP34"
)
### group the resulting data by SubjectID and by SessionID
# using the summarize function: 'mean()' and 'sd()' are then calculated for the columns of interest
# this results in 'BlockID' being removed from the resulting dataframe,
# as the block-wise values are averaged per participant-session into mean and sd-values
ses_avg_compl_grouped <-
session_avg_completer %>% group_by(SubjectID, SessionID) %>% summarise(
session_success_index = mean(success_index),
session_success_index_sd = sd(success_index),
session_personal_effect_size = mean(personal_effect_size),
session_personal_effect_size_sd = sd(personal_effect_size),
session_mean_efp_nf = mean(mean_efp_neurofeedback),
session_mean_efp_nf_sd = sd(mean_efp_neurofeedback),
session_mean_efp_bl = mean(mean_efp_baseline),
session_mean_efp_bl_sd = sd(mean_efp_baseline),
session_mean_vol_nf = mean(mean_vol_neurofeedback),
session_mean_vol_nf_sd = sd(mean_vol_neurofeedback),
)
View(ses_avg_compl_grouped)
##Outliers
outlier_graph <- ses_avg_compl_grouped %>%
group_by(SubjectID, SessionID) %>%
identify_outliers(session_success_index)
# Plot the average session values over time -------------------------------------------------------------------------------------------------------------------------------------------------------
# plot values for success index, personal effect size, mean neurofeedback, mean baseline
# make SubjectID a factor in order to visualize values for each participant separately
ses_avg_compl_grouped <-
within(ses_avg_compl_grouped, SubjectID <- factor(SubjectID))
### using ggplot, define 'ses_avg_compl_grouped' as the data to be plotted grouped by subject
# # plotted variable: mean of success index----------------------------------------------------------------------------------------------------------------------------------------------------------
# graphs_success_index <-
#   ggplot(data = ses_avg_compl_grouped,
#          aes(x = SessionID, y = session_success_index, group = SubjectID))
#
# # plot as a simple scatterplot
# graphs_success_index + geom_point()
# # plot as a simple spaghetti plot with different color for each subject and even session numbers on x-axis
# graphs_success_index + geom_line(aes(colour = SubjectID)) + scale_x_continuous(breaks =
#                                                                                  c(2, 4, 6, 8, 10))
# # plot as a simple spaghetti plot which ends at session 10 (only one subject had 12 sessions)
# graphs_success_index + geom_line(aes(colour = SubjectID)) + coord_cartesian(xlim = c(1, 10)) + scale_x_continuous(breaks =
#                                                                                                                     c(2, 4, 6, 8, 10))
# # plot as a spaghetti plot with a 10-session limit, group mean plotted with regression line and standard error shading
# # added a line using locally weighted regression (lowess) to "smooth" over all the variability and give a sense of the overall or average trend.
# graphs_success_index + geom_line(aes(colour = SubjectID)) + coord_cartesian(xlim = c(1, 10)) + stat_smooth(aes(group = 1)) + stat_summary(
#   aes(group = 1),
#   geom = "point",
#   fun = mean,
#   shape = 17,
#   size = 2)+
#   scale_x_continuous(breaks = c(2, 4, 6, 8, 10))+
#   ylab("Session Success Index")+
#   xlab("Session")+
#   theme(axis.text=element_text(size=12),
#         axis.title=element_text(size=12))+
#   theme(
#     # Remove panel border
#     panel.border = element_blank(),
#     # Remove panel grid lines
#     panel.grid.major = element_blank(),
#     panel.grid.minor = element_blank(),
#     # Remove panel background
#     panel.background = element_blank(),
#     # Add axis line
#     axis.line = element_line(colour = "grey"))
#
# #group mean plotted with regression line and standard error shading, with a 10-session limit
# Plot1<- graphs_success_index + coord_cartesian(xlim = c(1, 10)) + stat_smooth(aes(group = 1)) + stat_summary(
#   aes(group = 1),
#   geom = "point",
#   fun = mean,
#   shape = 17,
#   size = 2) +
#   scale_x_continuous(breaks = c(2, 4, 6, 8, 10))+
#   ylab("Success Index")+
#   xlab("Session")+
#   theme(axis.text=element_text(size=12),
#         axis.title=element_text(size=12))+
#   theme(
#     # Remove panel border
#     panel.border = element_blank(),
#     # Remove panel grid lines
#     panel.grid.major = element_blank(),
#     panel.grid.minor = element_blank(),
#     # Remove panel background
#     panel.background = element_blank(),
#     # Add axis line
#     axis.line = element_line(colour = "grey"))
##plotted variable: mean of personal effect size ---------------------------------------------------------------------------------------------------------------------------------------------------
graphs_pes <-
ggplot(data = ses_avg_compl_grouped,
aes(x = SessionID, y = session_personal_effect_size, group = SubjectID))
#spaghetti plot (subject colors, limited and even-numbered x-axis)
graphs_pes + geom_line(aes(colour = SubjectID)) + coord_cartesian(xlim = c(1, 10)) + scale_x_continuous(breaks =
c(2, 4, 6, 8, 10))
# spaghetti plot (subject colors, limited and even-numbered x-axis) + group mean plotted with regression line and standard error shading
graphs_pes + coord_cartesian(xlim = c(1, 10))+
stat_smooth(aes(group = 1)) + stat_summary(
aes(group = 1),
geom = "point",
fun = mean,
shape = 17,
size = 2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10))+
ylab("Personal Effect Size")+
xlab("Session")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12))+
theme(
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey"))
# group mean plotted with regression line and standard error shading
plot2<- graphs_pes + geom_line(aes(colour = SubjectID)) + coord_cartesian(xlim = c(1, 10))+
stat_smooth(aes(group = 1)) + stat_summary(
aes(group = 1),
geom = "point",
fun = mean,
shape = 17,
size = 2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10))+
ylab("Personal effect size")+
xlab("Session")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12))+
theme(
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey"))
##plotted variable: mean neurofeedback ------------------------------------------------------------------------------------------------------------------------------------------------------------
graphs_mean_nf <-
ggplot(data = ses_avg_compl_grouped, aes(x = SessionID, y = session_mean_vol_nf, group = SubjectID))
#spaghetti plot (subject colors, limited and even-numbered x-axis)
graphs_mean_nf + geom_line(aes(colour = SubjectID)) + coord_cartesian(xlim = c(1, 10)) + scale_x_continuous(breaks =
c(2, 4, 6, 8, 10))
# spaghetti plot (subject colors, limited and even-numbered x-axis) + group mean plotted with regression line and standard error shading
graphs_mean_nf  + coord_cartesian(xlim = c(1, 10)) + stat_smooth(aes(group = 1)) + stat_summary(
aes(group = 1),
geom = "point",
fun = mean,
shape = 17,
size = 2) +
scale_x_continuous(breaks = c(2, 4, 6, 8, 10))+
ylab("Session mean NF")+
xlab("Session")+
theme(axis.text=element_text(size=12),
axis.title=element_text(size=12))+
theme(
# Remove panel border
panel.border = element_blank(),
# Remove panel grid lines
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
# Remove panel background
panel.background = element_blank(),
# Add axis line
axis.line = element_line(colour = "grey"))
# ##plotted variable: mean baseline -----------------------------------------------------------------------------------------------------------------------------------------------------------------
# graphs_mean_bl <-
#   ggplot(data = ses_avg_compl_grouped, aes(x = SessionID, y = session_mean_bl, group = SubjectID))
# #spaghetti plot (subject colors, limited and even-numbered x-axis)
# graphs_mean_bl + geom_line(aes(colour = SubjectID)) + coord_cartesian(xlim = c(1, 10)) + scale_x_continuous(breaks =
#                                                                                                               c(2, 4, 6, 8, 10))
# # spaghetti plot (subject colors, limited and even-numbered x-axis) + group mean plotted with regression line and standard error shading
# graphs_mean_bl + coord_cartesian(xlim = c(1, 10)) + stat_smooth(aes(group = 1)) + stat_summary(
#   aes(group = 1),
#   geom = "point",
#   fun = mean,
#   shape = 17,
#   size = 2) +
#   scale_x_continuous(breaks = c(2, 4, 6, 8, 10))+
#   scale_x_continuous(breaks = c(2, 4, 6, 8, 10))+
#   ylab("Session mean BL")+
#   xlab("Session")+
#   theme(axis.text=element_text(size=12),
#         axis.title=element_text(size=12))+
#   theme(
#     # Remove panel border
#     panel.border = element_blank(),
#     # Remove panel grid lines
#     panel.grid.major = element_blank(),
#     panel.grid.minor = element_blank(),
#     # Remove panel background
#     panel.background = element_blank(),
#     # Add axis line
#     axis.line = element_line(colour = "grey"))
#
identify_outl
#################################################################
# Analysis of questionnaire pre-assessment and demographics of EFPTest study
# Zopfs, Paret, ZI Mannheim, 2023
#################################################################
# Set Working Directory-----------------------------------------
#################################################################
setwd("Y:/Projects/EFPTest/Data_analysis/open_materials_code_data_clinical_study/questionnaires_and_descriptives/data")
#################################################################
# Loading packages (installs if necessary)
#################################################################
if (!require("pacman")) install.packages("pacman")
pacman::p_load(tidyverse,
reshape2,
afex,
ggpubr,
rstatix)
###################################################################################################################################################################
#
# Preprocessing
#
###################################################################################################################################################################
#################################################################
# Loading packages (installs if necessary)
#################################################################
load("EFP_data.Rda")
#Construct separate dataframes for each questionnaire
ALScomplete<-  EFP_data%>%
select(contains('ALS'))
STAIcomplete<-  EFP_data%>%
select(contains('STAI'))
BDIcomplete<-  EFP_data%>%
select(contains('BDI'))
TAScomplete<-  EFP_data%>%
select(contains('TAS'))
#################################################################################
#BDI
#################################################################################
#BDI Recoding
BDIcomplete$pre_BDI_16recoded <- car::recode(BDIcomplete$pre_BDI_16,"2=2; 3=2; 4=3; 5=3; 6=4; 7=4")
BDIcomplete$pre_BDI_18recoded <- car::recode(BDIcomplete$pre_BDI_18,"2=2; 3=2; 4=3; 5=3; 6=4; 7=4")
BDIcomplete$post_BDI_16recoded <- car::recode(BDIcomplete$post_BDI_16,"2=2; 3=2; 4=3; 5=3; 6=4; 7=4")
BDIcomplete$post_BDI_18recoded <- car::recode(BDIcomplete$post_BDI_18,"2=2; 3=2; 4=3; 5=3; 6=4; 7=4")
BDIrecoded <- BDIcomplete %>%mutate_at(vars(-pre_BDI_16recoded,
-pre_BDI_18recoded,
-post_BDI_16recoded,
-post_BDI_18recoded),~ifelse(. == 1, 0, ifelse(. == 2, 1, ifelse(. == 3, 2, ifelse(. == 4, 3, .)))))
#remove old BDI_16 and BDI_18
BDIrecoded$pre_BDI_16 <- NULL
BDIrecoded$pre_BDI_18 <- NULL
BDIrecoded$post_BDI_16 <- NULL
BDIrecoded$post_BDI_18 <- NULL
#Sumscore BDI
BDIrecoded$pre_BDI_Total <- BDIrecoded %>%
select(contains('pre_BDI')) %>%
rowSums()
BDIrecoded$post_BDI_Total<- BDIrecoded %>%
select(contains('post_BDI')) %>%
rowSums()
#################################################################################
#ALS
#################################################################################
#ALS Recoding & Subscales
ALSrecoded <- ALScomplete %>%
mutate_all(~ifelse(. == 1, 3, ifelse(. == 2, 2, ifelse(. == 3, 1, ifelse(. == 4, 0, .)))))
##Forms subscale ALSDeprs from dataset ALSrecoded by summing relevant items
ALSrecoded$pre_ALS_subscale_Deprs <- rowSums (subset(ALSrecoded, select = c(pre_ALS_01, pre_ALS_08, pre_ALS_09, pre_ALS_13, pre_ALS_19, pre_ALS_25, pre_ALS_31, pre_ALS_40, pre_ALS_42, pre_ALS_46, pre_ALS_54)))
ALSrecoded$post_ALS_subscale_Deprs <- rowSums (subset(ALSrecoded, select = c(post_ALS_01, post_ALS_08, post_ALS_09, post_ALS_13, post_ALS_19, post_ALS_25, post_ALS_31, post_ALS_40, post_ALS_42, post_ALS_46, post_ALS_54)))
##subscale Hypomania
ALSrecoded$pre_ALS_subscale_Hypom <- rowSums (subset(ALSrecoded, select = c(pre_ALS_02, pre_ALS_06, pre_ALS_07, pre_ALS_18, pre_ALS_27, pre_ALS_32, pre_ALS_35, pre_ALS_36, pre_ALS_39, pre_ALS_45, pre_ALS_52, pre_ALS_53)))
ALSrecoded$post_ALS_subscale_Hypom <- rowSums (subset(ALSrecoded, select = c(post_ALS_02, post_ALS_06, post_ALS_07, post_ALS_18, post_ALS_27, post_ALS_32, post_ALS_35, post_ALS_36, post_ALS_39, post_ALS_45, post_ALS_52, post_ALS_53)))
##subscale Biphs
ALSrecoded$pre_ALS_subscale_Biphs <- rowSums (subset(ALSrecoded, select = c(pre_ALS_11, pre_ALS_24, pre_ALS_29, pre_ALS_30, pre_ALS_34, pre_ALS_47, pre_ALS_48, pre_ALS_51)))
ALSrecoded$post_ALS_subscale_Biphs <- rowSums (subset(ALSrecoded, select = c(post_ALS_11, post_ALS_24, post_ALS_29, post_ALS_30, post_ALS_34, post_ALS_47, post_ALS_48, post_ALS_51)))
##subscale Anxiety
ALSrecoded$pre_ALS_subscale_Anxty <- rowSums (subset(ALSrecoded, select = c(pre_ALS_04, pre_ALS_05, pre_ALS_12, pre_ALS_20, pre_ALS_26, pre_ALS_28, pre_ALS_44)))
ALSrecoded$post_ALS_subscale_Anxty <- rowSums (subset(ALSrecoded, select = c(post_ALS_04, post_ALS_05, post_ALS_12, post_ALS_20, post_ALS_26, post_ALS_28, post_ALS_44)))
##subscale Anger
ALSrecoded$pre_ALS_subscale_Anger <- rowSums (subset(ALSrecoded, select = c(pre_ALS_14, pre_ALS_15, pre_ALS_21, pre_ALS_23, pre_ALS_33, pre_ALS_41, pre_ALS_50)))
ALSrecoded$post_ALS_subscale_Anger <- rowSums (subset(ALSrecoded, select = c(post_ALS_14, post_ALS_15, post_ALS_21, post_ALS_23, post_ALS_33, post_ALS_41, post_ALS_50)))
##subcale Anxdp
ALSrecoded$pre_ALS_subscale_Anxdp <- rowSums (subset(ALSrecoded, select = c(pre_ALS_03, pre_ALS_10, pre_ALS_16, pre_ALS_17, pre_ALS_22, pre_ALS_37, pre_ALS_38, pre_ALS_49)))
ALSrecoded$post_ALS_subscale_Anxdp <- rowSums (subset(ALSrecoded, select = c(post_ALS_03, post_ALS_10, post_ALS_16, post_ALS_17, post_ALS_22, post_ALS_37, post_ALS_38, post_ALS_49)))
##ALS total pre sumscore
ALSrecoded$pre_ALS_Total <- ALSrecoded %>%
select(contains('pre_ALS_subscale')) %>%
rowSums()
##ALS total post sumscore
ALSrecoded$post_ALS_Total <- ALSrecoded %>%
select(contains('post_ALS_subscale')) %>%
rowSums()
#################################################################################
#STAI
#################################################################################
#STAI Recoding & Subscales
STAIrecoded <- STAIcomplete %>%
mutate_at(vars(pre_STAI_01, pre_STAI_06, pre_STAI_07, pre_STAI_10, pre_STAI_13, pre_STAI_16, pre_STAI_19), ~ifelse(. == 1, 4, ifelse(. == 2, 3, ifelse(. == 3, 2, ifelse(. == 4, 1, .)))))
#Calculate sum score for STAI
STAIrecoded$STAI_Total <- rowSums(STAIrecoded)
#################################################################################
#TAS
#################################################################################
##TAS Recoding & Subscales
TAS_withoutdaydream <- subset(TAScomplete,
select=c (pre_TAS_03,
pre_TAS_04,
pre_TAS_08,
pre_TAS_09,
pre_TAS_10,
pre_TAS_11,
pre_TAS_12,
pre_TAS_13,
pre_TAS_14,
pre_TAS_15,
pre_TAS_17,
pre_TAS_20,
pre_TAS_21,
pre_TAS_22,
pre_TAS_23,
pre_TAS_24,
pre_TAS_25,
pre_TAS_26,
post_TAS_03,
post_TAS_04,
post_TAS_08,
post_TAS_09,
post_TAS_10,
post_TAS_11,
post_TAS_12,
post_TAS_13,
post_TAS_14,
post_TAS_15,
post_TAS_17,
post_TAS_20,
post_TAS_21,
post_TAS_22,
post_TAS_23,
post_TAS_24,
post_TAS_25,
post_TAS_26))
TASrecoded <- TAS_withoutdaydream %>%
mutate_at(vars(pre_TAS_09,
pre_TAS_11,
pre_TAS_13,
pre_TAS_15,
pre_TAS_21,
pre_TAS_24,
post_TAS_09,
post_TAS_11,
post_TAS_13,
post_TAS_15,
post_TAS_21,
post_TAS_24),
~ifelse(. == 1, 5, ifelse(. == 2, 4, ifelse(. == 3, 3, ifelse(. == 4, 2, ifelse(. == 5, 1,.))))))
#Subscale identification of emotion
TASrecoded$pre_TAS_subscale_ident <- rowSums(subset(TASrecoded, select = c(pre_TAS_04, pre_TAS_10, pre_TAS_14, pre_TAS_17, pre_TAS_20, pre_TAS_25)))
TASrecoded$post_TAS_subscale_ident <- rowSums(subset(TASrecoded, select = c(post_TAS_04, post_TAS_10, post_TAS_14, post_TAS_17, post_TAS_20, post_TAS_25)))
#Subscale description of emotion
TASrecoded$pre_TAS_subscale_descr <- rowSums(subset(TASrecoded, select = c(pre_TAS_03, pre_TAS_08, pre_TAS_12, pre_TAS_22, pre_TAS_23)))
TASrecoded$post_TAS_subscale_descr <- rowSums(subset(TASrecoded, select = c(post_TAS_03, post_TAS_08, post_TAS_12, post_TAS_22, post_TAS_23)))
#Subscale thinking style
TASrecoded$pre_TAS_subscale_thnkng <- rowSums(subset(TASrecoded, select = c(pre_TAS_09, pre_TAS_11, pre_TAS_13, pre_TAS_15, pre_TAS_21, pre_TAS_24)))
TASrecoded$post_TAS_subscale_thnkng <- rowSums(subset(TASrecoded, select = c(post_TAS_09, post_TAS_11, post_TAS_13, post_TAS_15, post_TAS_21, post_TAS_24)))
#TAS total sum score
TASrecoded$pre_TAS_Total <- TASrecoded %>%
select(contains('pre_TAS_subscale')) %>%
rowSums()
#TAS Total post
TASrecoded$post_TAS_Total <- TASrecoded %>%
select(contains('post_TAS_subscale')) %>%
rowSums()
################################################################################
#Construct dataframes for following analyses
################################################################################
###Dataframe with all recoded Variables
Data1<- cbind(ALSrecoded,TASrecoded,
BDIrecoded, STAIrecoded, EFP_data$Condition, EFP_data$group, EFP_data$Probanden_ID)
Data1 <- dplyr::rename(Data1, Condition = 'EFP_data$Condition')
Data1$Condition <- as.factor(Data1$Condition)
Data1 <- dplyr::rename(Data1, Probanden_ID = 'EFP_data$Probanden_ID')
Data1 <- dplyr::rename(Data1, Group = 'EFP_data$group')
###################################################################################################################################################################
#
# Spaghetti plots pre-post for each group
#
###################################################################################################################################################################
#################################################################
# Spaghetti plot for ALS
#################################################################
ALS<- melt(data = Data1, id.vars = c("Condition", "Group", "Probanden_ID"), measure.vars = c("pre_ALS_Total", "post_ALS_Total"))
ALS<- ALS%>%dplyr::rename(time = 'variable',
ALSscore='value',
group='Condition',
group_id='Group')
ALScontrol <- subset(ALS, group=='control')
ALStreatment <- subset(ALS, group=='treatment')
ALS$group<-as.factor(ALS$group)
#Spaghetti plot ALSTotal
ggplot(ALS, aes(time, ALSscore)) + geom_line(aes(colour = group, group =
Probanden_ID)) + stat_smooth(data= ALScontrol, aes(group = 1), color= "red") + stat_smooth(data= ALStreatment, aes(group = 1), color= "blue") + stat_summary(
aes(colour = group, group = Probanden_ID),
geom = "point",
fun = mean,
shape = 24,
size = 2)
#################################################################
# Spaghetti plot for BDI
#################################################################
BDI<- melt(data = Data1, id.vars = c("Condition", "Probanden_ID"), measure.vars = c("pre_BDI_Total", "post_BDI_Total"))
BDI<- BDI%>%dplyr::rename(time = 'variable',
BDIscore='value',
group='Condition')
BDIcontrol <- subset(BDI, group=='control')
BDItreatment <- subset(BDI, group=='treatment')
BDI$group<-as.factor(BDI$group)
#Spaghetti plot BDITotal
ggplot(BDI, aes(time, BDIscore)) + geom_line(aes(colour = group, group =
Probanden_ID)) + stat_smooth(data= BDIcontrol, aes(group = 1), color= "red") + stat_smooth(data= BDItreatment, aes(group = 1), color= "blue") + stat_summary(
aes(colour = group, group = Probanden_ID),
geom = "point",
fun = mean,
shape = 24,
size = 2)
#################################################################
# Spaghetti plot for TAS
#################################################################
TAS<- melt(data = Data1, id.vars = c("Condition", "Probanden_ID"), measure.vars = c("pre_TAS_Total", "post_TAS_Total"))
TAS<- TAS%>%dplyr::rename(time = 'variable',
TASscore='value',
group='Condition')
TAScontrol <- subset(TAS, group=='control')
TAStreatment <- subset(TAS, group=='treatment')
TAS$group<-as.factor(TAS$group)
#Spaghetti plot TASTotal
ggplot(TAS, aes(time, TASscore)) + geom_line(aes(colour = group, group =
Probanden_ID)) + stat_smooth(data= TAScontrol, aes(group = 1), color= "red") + stat_smooth(data= TAStreatment, aes(group = 1), color= "blue") + stat_summary(
aes(colour = group, group = Probanden_ID),
geom = "point",
fun = mean,
shape = 24,
size = 2)
###################################################################################################################################################################
#
# Mixed ANOVAS
#
###################################################################################################################################################################
################################################################################
# Mixed ANOVA for ALS
################################################################################
#Melt(convert) dataframe into different structure to be able to conduct further analysis # CP: remove commented code in clean version
#ALS<- melt(data = Data1, id.vars = c("Condition", "Probanden_ID"), measure.vars = c("pre_ALS_Total", "post_ALS_Total"))
#rename variables in new dataframe for simplicity
#ALS <- ALS%>%dplyr::rename(time = 'variable',
#                    ALSscore='value',
#                   group='Condition')
#coerce "group" into a factor
#ALS$group<-as.factor(ALS$group)
#interaction plot (per condition, both time points) ### Not functioning, Paret 11.07.2022
#with(ALS, interaction.plot(x.factor = time , trace.factor = group,
#                           response = ALSscore))
##boxplot
bxp <- ggboxplot(
ALS, x = "time", y = "ALSscore",
color = "group", palette = "jco")
bxp
##Outliers
ALS %>%
group_by(time, group) %>%
identify_outliers(ALSscore)
##Normality
ALS %>%
group_by(time, group) %>%
shapiro_test(ALSscore)
ggqqplot(ALS, "ALSscore", ggtheme = theme_bw()) +
facet_grid(time ~ group)
##Homoscedasticity
ALS %>%
#  mutate(time=factor(time))%>% # CP: remove in clean version
group_by(time) %>%
levene_test(ALSscore ~ group)
##Homogeneity of Covariances
box_m(
#box_m hat agrumente "data" und "group"; ALS[,"ALSscore"] ist kein data.frame --> as.data.frame
as.data.frame(
#na.omit, weil box_m kann keine missing values verwenden
na.omit(
#data = ALS [,"ALSscore"]
ALS
)[,"ALSscore"]
#hier auch na.omit weil sonst ALS$ALSscore und ALS$group nicht gleich lang sind
), na.omit(ALS)[,"group"]
)
box_m(
as.data.frame(
na.omit(
BDI
)[,"BDIscore"]
), na.omit(BDI)[,"group"]
)
box_m(
as.data.frame(
na.omit(
TAS
)[,"TASscore"]
), na.omit(TAS)[,"group"]
)
